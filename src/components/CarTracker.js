import { useEffect, useState, useRef } from "react";
import { useTranslation } from 'react-i18next';

const SPEED_THRESHOLD_CAR = 30; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∫–º/—á)

export default function CarTracker({ user, car, supabase, setCar }) {
  const { t } = useTranslation();
  const [lastCoords, setLastCoords] = useState(null); // –î–ª—è UI –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  const [hasLocationPermission, setHasLocationPermission] = useState(false); // –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  const lastCoordsRef = useRef(null); // –î–ª—è –ª–æ–≥–∏–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

  useEffect(() => {
    if (!navigator.geolocation) {
      console.error("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
       
      setHasLocationPermission(false);
      return;
    }

    if (!user || !car) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    const checkPermission = async () => {
      if (navigator.permissions && navigator.permissions.query) {
        try {
          const permissionStatus = await navigator.permissions.query({ name: 'geolocation' });
          setHasLocationPermission(permissionStatus.state === 'granted');
          permissionStatus.onchange = () => {
            setHasLocationPermission(permissionStatus.state === 'granted');
          };
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
        }
      }
    };

    checkPermission();

    console.log("–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...");

    const watchId = navigator.geolocation.watchPosition(
      (position) => {
        const { latitude, longitude, speed } = position.coords;
        const speedKmh = (speed || 0) * 3.6;

        console.log(`üìç –°–∫–æ—Ä–æ—Å—Ç—å: ${speedKmh} –∫–º/—á, –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${latitude}, ${longitude}`);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–∫ true, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é
        setHasLocationPermission(true);

        if (speedKmh >= SPEED_THRESHOLD_CAR) {
          if (lastCoordsRef.current) {
            const distance = calculateDistance(lastCoordsRef.current, { latitude, longitude });

            if (distance > 0.05) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–µ—Ö–∞–ª–∏ –±–æ–ª—å—à–µ 50 –º–µ—Ç—Ä–æ–≤
              console.log(`üõ£ –ü—Ä–æ–π–¥–µ–Ω–æ: ${distance.toFixed(2)} –∫–º`);
              updateCarMileage(distance);
            }
          }
          lastCoordsRef.current = { latitude, longitude };
          setLastCoords({ latitude, longitude });
        }
      },
      (error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–∫–∏
        if (error.code === error.PERMISSION_DENIED) {
          setHasLocationPermission(false);
        }
      },
      { enableHighAccuracy: false, maximumAge: 30000, timeout: 10000 }
    );

    return () => {
      console.log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...");
      navigator.geolocation.clearWatch(watchId);
    };
  }, [user, car, supabase, setCar, t]);

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–•–∞–≤–µ—Ä—Å–∏–Ω–æ–≤–∞ —Ñ–æ—Ä–º—É–ª–∞)
  function calculateDistance(coord1, coord2) {
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    const dLat = toRad(coord2.latitude - coord1.latitude);
    const dLon = toRad(coord2.longitude - coord1.longitude);
    const lat1 = toRad(coord1.latitude);
    const lat2 = toRad(coord2.latitude);

    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
  }

  function toRad(value) {
    return (value * Math.PI) / 180;
  }

  const DEBOUNCE_DELAY = 5000; // –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
  const lastUpdateTime = useRef(0);

  async function updateCarMileage(distance) {
    if (!car || distance <= 0) return;

    const now = Date.now();
    if (now - lastUpdateTime.current < DEBOUNCE_DELAY) return;

    const newMileage = car.mileage + distance;

    console.log(`üîπ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–±–µ–≥: ${car.mileage} ‚Üí ${newMileage} –∫–º`);

    const { error } = await supabase
      .from("cars")
      .update({ mileage: newMileage })
      .eq("id", car.id);

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞:", error.message);
    } else {
      console.log("‚úÖ –ü—Ä–æ–±–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω");
      setCar((prevCar) => ({ ...prevCar, mileage: newMileage }));
      lastUpdateTime.current = now;
    }
  }

  return (
    <div>
      {hasLocationPermission ? (
        <p>üìç {t('gpsON')}</p>
      ) : (
        <p>‚è≥ {t('waitingGPS')}</p>
      )}
    </div>
  );
}