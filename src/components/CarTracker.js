import { useEffect, useState } from "react";

const SPEED_THRESHOLD_CAR = 30; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∫–º/—á)

export default function CarTracker({ user, car, supabase, setCar }) {
  const [lastCoords, setLastCoords] = useState(null);

  useEffect(() => {
    if (!user || !car) return;

    const watchId = navigator.geolocation.watchPosition(
      (position) => {
        const { latitude, longitude, speed } = position.coords;
        const speedKmh = (speed || 0) * 3.6; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º/—Å –≤ –∫–º/—á

        console.log(`üìç –°–∫–æ—Ä–æ—Å—Ç—å: ${speedKmh} –∫–º/—á`);

        // –ò—Å–∫–ª—é—á–∞–µ–º —Ö–æ–¥—å–±—É –∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥
        if (speedKmh >= SPEED_THRESHOLD_CAR) {
          if (lastCoords) {
            const distance = calculateDistance(lastCoords, { latitude, longitude });

            if (distance > 0.05) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–µ—Ö–∞–ª–∏ –±–æ–ª—å—à–µ 50 –º–µ—Ç—Ä–æ–≤
              console.log(`üõ£ –ü—Ä–æ–π–¥–µ–Ω–æ: ${distance.toFixed(2)} –∫–º`);
              updateCarMileage(distance);
            }
          }
          setLastCoords({ latitude, longitude }); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        }
      },
      (error) => console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error),
      { enableHighAccuracy: true, maximumAge: 0, timeout: 5000 }
    );

    return () => navigator.geolocation.clearWatch(watchId);
  }, [user, car, lastCoords]);

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–•–∞–≤–µ—Ä—Å–∏–Ω–æ–≤–∞ —Ñ–æ—Ä–º—É–ª–∞)
  function calculateDistance(coord1, coord2) {
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    const dLat = toRad(coord2.latitude - coord1.latitude);
    const dLon = toRad(coord2.longitude - coord1.longitude);
    const lat1 = toRad(coord1.latitude);
    const lat2 = toRad(coord2.latitude);

    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
  }

  function toRad(value) {
    return (value * Math.PI) / 180;
  }

  // üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  async function updateCarMileage(distance) {
    if (!car || distance <= 0) return;

    const newMileage = car.mileage + distance;

    console.log(`üîπ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–±–µ–≥: ${car.mileage} ‚Üí ${newMileage} –∫–º`);

    const { error } = await supabase
      .from("cars")
      .update({ mileage: newMileage })
      .eq("id", car.id);

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞:", error.message);
    } else {
      console.log("‚úÖ –ü—Ä–æ–±–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω");

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –≤ React
      setCar((prevCar) => ({ ...prevCar, mileage: newMileage }));
    }
  }

  return (
    <div>
           {lastCoords ? (
        <p>üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</p>
      ) : (
        <p>‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ GPS...</p>
      )}
    </div>
  );
}
