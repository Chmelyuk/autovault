import React, { useState } from 'react';
import './Header.css';
import { supabase } from '../supabaseClient';
import { QRCodeSVG } from 'qrcode.react';
import QRScanner from './QRScanner'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∫–∞–Ω–µ—Ä–∞

export default function Header({ user, handleLogout, openEditModal, fetchCars, fetchRepairs, fetchMaintenance }) {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [showQRCode, setShowQRCode] = useState(false);
  const [qrData, setQrData] = useState(null);
  const [showQRScanner, setShowQRScanner] = useState(false);
  const firstLetter = user?.email?.charAt(0).toUpperCase();

  const toggleDropdown = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  const handleDownloadRepairs = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–∞—Ö
      const { data: cars, error: carError } = await supabase
        .from("cars")
        .select("*")
        .eq("user_id", user.id); // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

      if (carError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–∞—Ö:", carError);
        return;
      }

      if (cars.length === 0) {
        console.error("–ú–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        return;
      }

      const car = cars[0]; // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –º–∞—à–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö
      const { data: repairs, error: repairsError } = await supabase
        .from("repairs")
        .select("*")
        .eq("car_id", car.id); // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—à–∏–Ω–µ

      if (repairsError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö:", repairsError);
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞
      const exportData = {
        car,
        repairs,
      };

      setQrData(JSON.stringify(exportData));
      setShowQRCode(true);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ QR-–∫–æ–¥–∞:", error);
    }
  };

  const handleScanSuccess = async (data) => {
  try {
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ QR-–∫–æ–¥–∞
    const fileData = JSON.parse(data);

    console.log("üìÇ –î–∞–Ω–Ω—ã–µ –∏–∑ QR-–∫–æ–¥–∞:", fileData);

    let newCarId;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º VIN
    const { data: existingCar, error: carCheckError } = await supabase
      .from("cars")
      .select("id, user_id")
      .eq("vin", fileData.car.vin)
      .maybeSingle();

    if (carCheckError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ VIN:", carCheckError.message);
      return;
    }

    if (existingCar) {
      if (existingCar.user_id === user.id) {
        console.log("‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–∞—à–∏–Ω—É");
        newCarId = existingCar.id;
      } else {
        console.warn("‚ö†Ô∏è VIN —É–∂–µ —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é.");
        newCarId = crypto.randomUUID();
        fileData.car.vin = `NEW-${fileData.car.vin}`;
      }
    } else {
      newCarId = crypto.randomUUID();
      console.log("üöó –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID:", newCarId);
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—à–∏–Ω—É
    const { error: carUpsertError } = await supabase
      .from("cars")
      .upsert([{ ...fileData.car, id: newCarId, user_id: user.id }]);

    if (carUpsertError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã:", carUpsertError);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–º–æ–Ω—Ç—ã
    if (fileData.repairs) {
      const formattedRepairs = fileData.repairs.map(repair => ({
        ...repair,
        user_id: user.id,
        car_id: newCarId,
      }));

      const { error: repairsInsertError } = await supabase
        .from("repairs")
        .insert(formattedRepairs);

      if (repairsInsertError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤:", repairsInsertError);
        return;
      }
    }

    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º UI...");
    fetchCars(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
    fetchRepairs(newCarId); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤

    setShowQRScanner(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ QR-–∫–æ–¥–∞:", error);
  }
};
  const handleScanError = (error) => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR-–∫–æ–¥–∞:", error);
  };

  return (
    <header className="header">
      <div className="user-icon" onClick={toggleDropdown}>
        {firstLetter}
      </div>

      {isDropdownOpen && (
        <div className="dropdown-menu">
          <button onClick={handleLogout}>Logout</button>
          <button onClick={openEditModal}>Edit Info</button>
          <button onClick={handleDownloadRepairs}>Generate QR Code</button>
          <button onClick={() => setShowQRScanner(true)}>Scan QR Code</button>
        </div>
      )}

      {showQRCode && (
        <div className="qr-modal">
          <div className="qr-content">
            <QRCodeSVG value={qrData} />
            <button onClick={() => setShowQRCode(false)}>Close</button>
          </div>
        </div>
      )}

      {showQRScanner && (
        <div className="qr-scanner-modal">
          <div className="qr-scanner-content">
            <QRScanner
              onScanSuccess={handleScanSuccess}
              onScanError={handleScanError}
            />
            <button onClick={() => setShowQRScanner(false)}>Close</button>
          </div>
        </div>
      )}
    </header>
  );
}