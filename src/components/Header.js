import React, { useState } from 'react';
import './Header.css';
import { supabase } from '../supabaseClient';
import { QRCodeSVG } from 'qrcode.react';
import QRScanner from './QRScanner';
import { useTranslation } from 'react-i18next';
import CarTracker from './CarTracker';

export default function Header({ user, handleLogout, openEditModal, fetchCars, fetchRepairs, fetchMaintenance }) {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [showQRCode, setShowQRCode] = useState(false);
  const [qrData, setQrData] = useState(null);
  const [showQRScanner, setShowQRScanner] = useState(false);
  const [showAddCarModal, setShowAddCarModal] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  const [newCar, setNewCar] = useState({ // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    brand: '',
    model: '',
    year: '',
    engine: '',
    mileage: '',
    vin: '',
    fuelType: '',
    transmissionType: '',
    turbocharged: false,
  });
  const firstLetter = user?.email?.charAt(0).toUpperCase();
  const { t, i18n } = useTranslation();
  const [car, setCar] = useState(null);

  const toggleDropdown = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  const openAddCarModal = () => {
    setShowAddCarModal(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  const closeAddCarModal = () => {
    setShowAddCarModal(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  const handleNewCarChange = (e) => {
    const { name, value, type, checked } = e.target;
    setNewCar({
      ...newCar,
      [name]: type === 'checkbox' ? checked : value,
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  const addNewCar = async () => {
    try {
      const { data, error } = await supabase
        .from('cars')
        .insert([{ ...newCar, user_id: user.id }])
        .select('*')
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error.message);
      } else {
        console.log('–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', data);
        fetchCars(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        closeAddCarModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', err);
    }
  };
  const handleGenerateQRCode = async () => {
  try {
    const { data: cars, error: carError } = await supabase
      .from("cars")
      .select("*")
      .eq("user_id", user.id);

    if (carError || !cars.length) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—à–∏–Ω—ã:", carError || "–ú–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }

    const car = cars[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –º–∞—à–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setQrData(car.id); // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ car_id
    setShowQRCode(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR-–∫–æ–¥
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:", error);
  }
};

  /** üìå –§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞ */
const handleScanSuccess = async (data) => {
  try {
    // –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ carId
    const carId = data.trim();
    if (!/^[0-9a-fA-F-]{36}$/.test(carId)) {
      console.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç carId:", carId);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º car_id
    const { data: existingCar, error: carCheckError } = await supabase
      .from("cars")
      .select("*")
      .eq("id", carId)
      .maybeSingle();

    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:", { existingCar, carCheckError });

    if (carCheckError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", carCheckError.message);
      return;
    }

    if (!existingCar) {
      console.error("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º user_id –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ cars
    const { error: carUpdateError } = await supabase
      .from("cars")
      .update({ user_id: user.id })
      .eq("id", carId);

    if (carUpdateError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", carUpdateError);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º user_id –¥–ª—è –≤—Å–µ—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
    const { error: repairsUpdateError } = await supabase
      .from("repairs")
      .update({ user_id: user.id })
      .eq("car_id", carId);

    if (repairsUpdateError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤:", repairsUpdateError);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º user_id –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¢–û, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
    const { error: maintenanceUpdateError } = await supabase
      .from("maintenance")
      .update({ user_id: user.id })
      .eq("car_id", carId);

    if (maintenanceUpdateError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –¢–û:", maintenanceUpdateError);
      return;
    }

    console.log("‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å, —Ä–µ–º–æ–Ω—Ç—ã –∏ –∑–∞–ø–∏—Å–∏ –¢–û —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–æ–≤–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É!");

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    fetchCars();
    fetchRepairs(carId);
    fetchMaintenance(carId); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¢–û
    setShowQRScanner(false);

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ QR-–∫–æ–¥–∞:", error);
  }
};

  const handleScanError = (error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞:", error);
  };

  return (
    <header className="header">
      <div className="user-icon" onClick={toggleDropdown}>
        {firstLetter}
      </div>

      {isDropdownOpen && (
        <div className="dropdown-menu">
          <CarTracker user={user} car={car} supabase={supabase} setCar={setCar} />
          <div className='language-buttons'>
            <span>{t('language')}: </span>
            <button onClick={() => i18n.changeLanguage('en')}>üá¨üáß</button>
            <button onClick={() => i18n.changeLanguage('ru')}>üá∑üá∫</button>
            <button onClick={() => i18n.changeLanguage('uk')}>üá∫üá¶</button>
          </div>
          <button onClick={handleLogout}>{t('logout')}</button>
          <button onClick={openEditModal}>{t('editInfo')}</button>
          <button onClick={handleGenerateQRCode}>{t('generateQRCode')}</button>
          <button onClick={() => setShowQRScanner(true)}>{t('scanQRCode')}</button>
          <button onClick={openAddCarModal}>{t('addCar')}</button> {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è */}
        </div>
      )}

      {showAddCarModal && ( // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        <div className="modal">
          <div className="modal-content">
            <h3>{t('addCar')}</h3>
            <form onSubmit={(e) => { e.preventDefault(); addNewCar(); }}>
              <input
                type="text"
                name="brand"
                placeholder={t('brand')}
                value={newCar.brand}
                onChange={handleNewCarChange}
              />
              <input
                type="text"
                name="model"
                placeholder={t('model')}
                value={newCar.model}
                onChange={handleNewCarChange}
              />
              <input
                type="number"
                name="year"
                placeholder={t('year')}
                value={newCar.year}
                onChange={handleNewCarChange}
              />
              <input
                type="text"
                name="engine"
                placeholder={t('engine')}
                value={newCar.engine}
                onChange={handleNewCarChange}
              />
              <input
                type="number"
                name="mileage"
                placeholder={t('mileage')}
                value={newCar.mileage}
                onChange={handleNewCarChange}
              />
              <input
                type="text"
                name="vin"
                placeholder={t('vin')}
                value={newCar.vin}
                onChange={handleNewCarChange}
              />
              <select
                name="fuelType"
                value={newCar.fuelType}
                onChange={handleNewCarChange}
              >
                <option value="">{t('selectFuelType')}</option>
                <option value="Petrol">{t('petrol')}</option>
                <option value="Diesel">{t('diesel')}</option>
                <option value="Electric">{t('electric')}</option>
                <option value="Hybrid">{t('hybrid')}</option>
              </select>
              <select
                name="transmissionType"
                value={newCar.transmissionType}
                onChange={handleNewCarChange}
              >
                <option value="">{t('selectTransmission')}</option>
                <option value="Manual">{t('manual')}</option>
                <option value="Automatic">{t('automatic')}</option>
                <option value="CVT">{t('cvt')}</option>
                <option value="Dual-clutch">{t('dualClutch')}</option>
              </select>
              <label>
                <input
                  type="checkbox"
                  name="turbocharged"
                  checked={newCar.turbocharged}
                  onChange={handleNewCarChange}
                />
                {t('turbocharged')}
              </label>
              <button type="submit">{t('save')}</button>
              <button type="button" onClick={closeAddCarModal}>{t('cancel')}</button>
            </form>
          </div>
        </div>
      )}

      {showQRCode && (
        <div className="qr-modal">
          <div className="qr-content">
            <QRCodeSVG
              value={qrData}
              size={312}
              level="H"
              margin={20}
            />
            <button onClick={() => setShowQRCode(false)}>Close</button>
          </div>
        </div>
      )}

      {showQRScanner && (
        <div className="qr-scanner-modal">
          <div className="qr-scanner-content">
            <QRScanner
              onScanSuccess={handleScanSuccess}
              onScanError={handleScanError}
            />
            <button onClick={() => setShowQRScanner(false)}>Close</button>
          </div>
        </div>
      )}
    </header>
  );
}